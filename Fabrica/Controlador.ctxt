#BlueJ class context
comment0.target=Controlador
comment0.text=\r\n\ Clase\ que\ controla\ las\ distintas\ operaciones\ sobre\ ficheros\r\n\ \r\n\ @author\ Marcos\ La\u00ED\u00F1o\ Ord\u00F3\u00F1ez\r\n
comment1.params=
comment1.target=void\ createArchivoPersonas()
comment1.text=\r\n\ Crea\ el\ archivo\ de\ datos\ en\ el\ que\ se\ va\ a\ almacenar\ el\ array-list\ de\ personas\r\n
comment10.params=
comment10.target=void\ checkFicheroMuebles()
comment10.text=\r\n\ M\u00E9todo\ que\ comprueba\ que\ exista\ los\ archivos\ de\ datos.\r\n\ En\ caso\ de\ que\ no\ existan\ estos\ archivos,\ los\ crea\ con\ datos\ iniciales\ para\ poder\ realizar\ las\ pruebas.\r\n
comment11.params=
comment11.target=void\ initialData()
comment11.text=\r\n\ M\u00E9todo\ que\ genera\ datos\ iniciales\ con\ los\ que\ testear\ la\ aplicaci\u00F3n\r\n
comment12.params=
comment12.target=void\ verListaEmpleados()
comment12.text=\r\n\ M\u00E9todo\ que\ permite\ al\ Jefe\ consultar\ la\ lista\ de\ todos\ los\ empleados\ con\ los\ datos\ m\u00E1s\ relevantes\r\n
comment13.params=
comment13.target=void\ crearEmpleado()
comment13.text=\r\n\ M\u00E9todo\ que\ permite\ al\ jefe\ "contratar"\ a\ trav\u00E9s\ de\ un\ formulario.\r\n
comment14.params=
comment14.target=void\ despedirEmpleado()
comment14.text=\r\n\ M\u00E9todo\ con\ el\ que\ el\ jefe\ despide\ a\ un\ empleado.\r\n\ Despedir\ un\ empleado\ supone\ que\ la\ fecha\ de\ baja\ deja\ de\ ser\ nula\ y\ tiene\ dos\ consecuencias\ inmediatas\:\r\n\ \ 1)\ El\ empleado\ despedido\ no\ puede\ loguearse\ en\ la\ aplicaci\u00F3n.\r\n\ \ 2)\ Si\ el\ empleado\ es\ un\ Artesano\ los\ muebles\ asignados\ a\ este\ usuario\ quedan\ desasignados.\r\n\ \ \ \ \ \ Y\ si\ el\ empleado\ es\ un\ comercial,\ los\ clientes\ asignados\ a\ este\ comercial\ quedan\ con\ el\ campo\ id_comercial\ como\ nulo.\r\n\ \ Como\ condici\u00F3n,\ un\ jefe\ no\ puede\ despedirse\ a\ si\ mismo.\r\n
comment15.params=id_comercial
comment15.target=void\ verListaClientesComercial(int)
comment15.text=\r\n\ M\u00E9todo\ que\ permite\ al\ Comercial\ consultar\ la\ lista\ de\ todos\ los\ clientes\ a\ su\ cargo.\r\n
comment16.params=usuario
comment16.target=boolean\ comprobarNick(java.lang.String)
comment16.text=\r\n\ M\u00E9todo\ que\ comprueba\ si\ el\ nick\ que\ pasamos\ como\ par\u00E1metro\ corresponde\ a\ alg\u00FAn\ usuario\ existente\r\n
comment17.params=campo\ nulo\ exacto\ min\ max
comment17.target=java.lang.String\ setDato(java.lang.String,\ boolean,\ int,\ int,\ int)
comment17.text=\r\n\ M\u00E9todo\ que\ permite\ que\ el\ usuario\ establezca\ el\ valor\ de\ un\ atributo\ estableciendo\ unos\ l\u00EDmites\ al\ valor.\r\n
comment18.params=
comment18.target=int\ elegirOpcion()
comment19.params=
comment19.target=int\ seleccionarIdEmpleado()
comment2.params=personas
comment2.target=void\ savePersonas(java.util.ArrayList)
comment2.text=\r\n\ M\u00E9todo\ que\ permite\ guardar\ en\ un\ fichero\ el\ arraylist\ de\ personas\ que\ se\ le\ pasa\ por\ par\u00E1metro.\r\n
comment3.params=
comment3.target=java.util.ArrayList\ loadPersonas()
comment3.text=\r\n\ M\u00E9todo\ que\ devuelve\ un\ arraylist\ con\ todas\ las\ personas\ guardadas\ en\ el\ fichero.\r\n
comment4.params=
comment4.target=java.util.ArrayList\ loadEmpleados()
comment4.text=\r\n\ M\u00E9todo\ que\ devuelve\ un\ arraylist\ con\ todos\ los\ empleados\ guardados\ en\ el\ fichero.\r\n
comment5.params=
comment5.target=java.util.ArrayList\ loadClientes()
comment5.text=\r\n\ M\u00E9todo\ que\ devuelve\ un\ arraylist\ con\ todos\ los\ clientes\ guardados\ en\ el\ fichero.\r\n
comment6.params=
comment6.target=void\ checkFicheroPersonas()
comment6.text=\r\n\ M\u00E9todo\ que\ comprueba\ que\ exista\ los\ archivos\ de\ datos.\r\n\ En\ caso\ de\ que\ no\ existan\ estos\ archivos,\ los\ crea\ con\ datos\ iniciales\ para\ poder\ realizar\ las\ pruebas.\r\n
comment7.params=
comment7.target=void\ createArchivoMuebles()
comment7.text=\r\n\ Crea\ el\ archivo\ de\ datos\ en\ el\ que\ se\ va\ a\ almacenar\ el\ array-list\ de\ muebles\r\n
comment8.params=muebles
comment8.target=void\ saveMuebles(java.util.ArrayList)
comment8.text=\r\n\ M\u00E9todo\ que\ permite\ guardar\ en\ un\ fichero\ el\ arraylist\ de\ empleados\ que\ se\ le\ pasa\ por\ par\u00E1metro.\r\n
comment9.params=
comment9.target=java.util.ArrayList\ loadMuebles()
comment9.text=\r\n\ M\u00E9todo\ que\ devuelve\ un\ arraylist\ con\ todos\ los\ muebles\ guardados\ en\ el\ fichero.\r\n
numComments=20
